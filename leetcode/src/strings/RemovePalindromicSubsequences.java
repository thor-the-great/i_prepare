package strings;

/**
 * 1332. Remove Palindromic Subsequences
 * Easy
 *
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
 * subsequence from s.
 *
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string
 * without changing its order.
 *
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 *
 *
 * Example 1:
 *
 * Input: s = "ababa"
 * Output: 1
 * Explanation: String is already palindrome
 * Example 2:
 *
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 * Example 3:
 *
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "".
 * Remove palindromic subsequence "baab" then "b".
 * Example 4:
 *
 * Input: s = ""
 * Output: 0
 *
 *
 * Constraints:
 *
 * 0 <= s.length <= 1000
 * s only consists of letters 'a' and 'b'
 */
public class RemovePalindromicSubsequences {

    /**
     * The trick here is in number of different possible chars in string - we can have only two - 'a' and 'b'. Thus
     * if the string is not the palindrome yet no matter what are chars positions - we always can remove all 'a'
     * and then we'll have all 'b' that we can remove of a seconds operation. This leads to a following algorithm:
     * check if lenth is 0 - return 0;
     * start checking if the string is a palindrome by using two converging pointers technique
     * if we met one pair of chars that makes string non-palindromic - return 2 because this means we have both 'a'
     * and 'b' in the string
     * if string is a palindrome - return 1 because ew can delete it in one operation
     *
     * O(n) time - iterate over each char in string once. O(1) space - just few variables to keep state
     * @param s
     * @return
     */
    public int removePalindromeSub(String s) {
        int r = s.length();
        if (r == 0)
            return 0;
        //check if pali
        int l = 0; --r;
        while (l <= r)
            if (s.charAt(l++) != s.charAt(r--)) return 2;

        return 1;
    }
}
